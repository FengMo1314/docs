import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as l,o,c as p,a as n,d as c,w as i,e as t,b as e}from"./app-BhtAeQQz.js";const u={},d=t(`<h1 id="内置组件" tabindex="-1"><a class="header-anchor" href="#内置组件"><span>内置组件</span></a></h1><h2 id="clientonly" tabindex="-1"><a class="header-anchor" href="#clientonly"><span>ClientOnly</span></a></h2><ul><li>使用：</li></ul><div class="language-markdown line-numbers-mode" data-ext="md" data-title="md"><pre class="language-markdown"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ClientOnly</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>NonSsrFriendlyComponent</span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ClientOnly</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>详情：</p><p>该组件和它的子元素只会在客户端被渲染。也就是说，它不会在构建 (SSR) 过程中被渲染到 HTML 内。</p><p>如果一个组件在 <code>setup()</code> 中直接使用 浏览器 / DOM API ，它会导致构建过程报错，因为这些 API 在 Node.js 的环境中是无法使用的。在这种情况下，你可以选择一种方式：</p><ul><li>修改这个组件，只在 <code>onBeforeMount()</code> 或 <code>onMounted()</code> Hook 中使用 浏览器 / DOM API 。</li><li>使用 <code>&lt;ClientOnly&gt;</code> 包裹这个组件。</li></ul></li></ul><h2 id="content" tabindex="-1"><a class="header-anchor" href="#content"><span>Content</span></a></h2><ul><li><p>Props:</p><ul><li>path <ul><li>类型： <code>string</code></li><li>是否必须： <code>false</code></li></ul></li></ul></li><li><p>使用：</p></li></ul><div class="language-markdown line-numbers-mode" data-ext="md" data-title="md"><pre class="language-markdown"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Content</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/path/to/page.md<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,8),r=n("li",null,[n("p",null,"详情："),n("p",null,"该组件会渲染页面的 Markdown 内容。"),n("p",null,[e("如果没有传入 "),n("code",null,"path"),e(" Prop ，它会渲染当前路由下的页面内容。")]),n("p",null,"该组件主要是为了开发主题时使用。在绝大多数情况下你不会用到它。")],-1),m=n("p",null,"参考：",-1),k=t(`<h2 id="routelink" tabindex="-1"><a class="header-anchor" href="#routelink"><span>RouteLink</span></a></h2><ul><li><p>Props:</p><ul><li>to <ul><li>类型： <code>string</code></li><li>是否必须： <code>true</code></li></ul></li><li>active <ul><li>类型： <code>boolean</code></li><li>是否必须： <code>false</code></li><li>默认值： <code>false</code></li></ul></li><li>activeClass <ul><li>类型： <code>string</code></li><li>是否必须： <code>false</code></li><li>默认值： <code>&#39;route-link-active&#39;</code></li></ul></li></ul></li><li><p>使用：</p></li></ul><div class="language-markdown line-numbers-mode" data-ext="md" data-title="md"><pre class="language-markdown"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RouteLink</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/path/to/target-page.md<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>目标页面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>RouteLink</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RouteLink</span> <span class="token attr-name">active</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/path/to/current-page.md<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>当前页面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>RouteLink</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>详情：</p><p>该组件会渲染一个链接，用于跳转到指定页面。</p><p>如果 <code>active</code> Prop 被设置为 <code>true</code> ，那么这个链接会被额外添加一个 <code>activeClass</code> 类名。需要注意的是，这里的 active 状态并不会根据当前路由自动更新。</p><p>该组件主要是为了开发主题时使用。在绝大多数情况下你不会用到它。对于主题作者来说，我们建议你尽可能使用这个组件，而不是使用 <code>vue-router</code> 的 <code>&lt;RouterLink&gt;</code> 组件。</p></li></ul>`,4);function h(g,v){const a=l("RouteLink");return o(),p("div",null,[d,n("ul",null,[r,n("li",null,[m,n("ul",null,[n("li",null,[c(a,{to:"/zh/reference/node-api.html#path"},{default:i(()=>[e("Node API > Page 属性 > path")]),_:1})])])])]),k])}const _=s(u,[["render",h],["__file","components.html.vue"]]),b=JSON.parse('{"path":"/zh/reference/components.html","title":"内置组件","lang":"zh-CN","frontmatter":{"icon":"fa6-solid:puzzle-piece","description":"内置组件 ClientOnly 使用： 详情： 该组件和它的子元素只会在客户端被渲染。也就是说，它不会在构建 (SSR) 过程中被渲染到 HTML 内。 如果一个组件在 setup() 中直接使用 浏览器 / DOM API ，它会导致构建过程报错，因为这些 API 在 Node.js 的环境中是无法使用的。在这种情况下，你可以选择一种方式： 修改这个...","head":[["link",{"rel":"alternate","hreflang":"en-us","href":"https://vuejs.press/reference/components.html"}],["meta",{"property":"og:url","content":"https://vuejs.press/zh/reference/components.html"}],["meta",{"property":"og:site_name","content":"VuePress"}],["meta",{"property":"og:title","content":"内置组件"}],["meta",{"property":"og:description","content":"内置组件 ClientOnly 使用： 详情： 该组件和它的子元素只会在客户端被渲染。也就是说，它不会在构建 (SSR) 过程中被渲染到 HTML 内。 如果一个组件在 setup() 中直接使用 浏览器 / DOM API ，它会导致构建过程报错，因为这些 API 在 Node.js 的环境中是无法使用的。在这种情况下，你可以选择一种方式： 修改这个..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-02-06T14:32:58.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-06T14:32:58.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"内置组件\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-02-06T14:32:58.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"ClientOnly","slug":"clientonly","link":"#clientonly","children":[]},{"level":2,"title":"Content","slug":"content","link":"#content","children":[]},{"level":2,"title":"RouteLink","slug":"routelink","link":"#routelink","children":[]}],"git":{"createdTime":1701614677000,"updatedTime":1707229978000,"contributors":[{"name":"Mr.Hope","email":"mister-hope@outlook.com","commits":4},{"name":"meteorlxy","email":"meteor.lxy@foxmail.com","commits":3}]},"readingTime":{"minutes":1.46,"words":437},"filePathRelative":"zh/reference/components.md","localizedDate":"2023年12月3日","autoDesc":true}');export{_ as comp,b as data};
