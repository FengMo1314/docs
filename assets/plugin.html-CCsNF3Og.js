import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o,c,a as n,b as s,d as e,w as t,e as i}from"./app-5nSivCWm.js";const r={},u=n("h1",{id:"writing-a-plugin",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#writing-a-plugin"},[n("span",null,"Writing a Plugin")])],-1),d={class:"hint-container tip"},m=n("p",{class:"hint-container-title"},"Tips",-1),g=n("h2",{id:"create-a-plugin",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#create-a-plugin"},[n("span",null,"Create a Plugin")])],-1),h=n("em",null,"Plugin Object",-1),v=i(`<div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">const</span> fooPlugin <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  name<span class="token operator">:</span> <span class="token string">&#39;vuepress-plugin-foo&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),k=n("em",null,"Plugin Object",-1),b=n("em",null,"Plugin Function",-1),f=i(`<div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">barPlugin</span> <span class="token operator">=</span> <span class="token punctuation">(</span>app<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">    name<span class="token operator">:</span> <span class="token string">&#39;vuepress-plugin-bar&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A plugin usually needs to allow user options, so we typically provide users with a function to receive options, and returns a <em>Plugin Object</em> or a <em>Plugin Function</em>. Then your plugin should be converted like this:</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">fooPlugin</span> <span class="token operator">=</span> <span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">    name<span class="token operator">:</span> <span class="token string">&#39;vuepress-plugin-foo&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">barPlugin</span> <span class="token operator">=</span> <span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span>app<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">      name<span class="token operator">:</span> <span class="token string">&#39;vuepress-plugin-bar&#39;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token comment">// ...</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="publish-to-npm" tabindex="-1"><a class="header-anchor" href="#publish-to-npm"><span>Publish to NPM</span></a></h2><p>After creating a plugin, you should follow some conventions in the <a href="https://docs.npmjs.com/cli/v8/configuring-npm/package-json" target="_blank" rel="noopener noreferrer">package.json</a> file before publishing it to NPM:</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vuepress-plugin-foo&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;keywords&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;vuepress-plugin&quot;</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),_=n("code",null,"name",-1),y=n("code",null,"vuepress-plugin-xxx",-1),P=n("code",null,"@org/vuepress-plugin-xxx",-1),w=n("em",null,"Plugin Object",-1),x=n("li",null,[s("Set "),n("code",null,"keywords"),s(" to include "),n("code",null,"vuepress-plugin"),s(", so that users can search your plugin on NPM.")],-1);function j(T,N){const a=p("RouteLink");return o(),c("div",null,[u,n("div",d,[m,n("p",null,[s("Before reading this guide, you'd better learn the VuePress "),e(a,{to:"/advanced/architecture.html"},{default:t(()=>[s("architecture")]),_:1}),s(" first.")])]),g,n("p",null,[s("A plugin should be a plain JavaScript object that satisfies the "),e(a,{to:"/reference/plugin-api.html"},{default:t(()=>[s("Plugin API")]),_:1}),s(", which is called a "),h,s(":")]),v,n("p",null,[s("A plugin could also be a function that receives the "),e(a,{to:"/reference/node-api.html#app"},{default:t(()=>[s("app instance")]),_:1}),s(" as the param and returns a "),k,s(", which is called a "),b,s(":")]),f,n("ul",null,[n("li",null,[s("Set "),_,s(" to follow the naming convention, i.e. "),y,s(" or "),P,s(", which should be consistent with the "),e(a,{to:"/reference/plugin-api.html#name"},{default:t(()=>[s("name")]),_:1}),s(" field of the "),w,s(".")]),x])])}const A=l(r,[["render",j],["__file","plugin.html.vue"]]),V=JSON.parse(`{"path":"/advanced/plugin.html","title":"Writing a Plugin","lang":"en-US","frontmatter":{"icon":"fa6-solid:plug","description":"Writing a Plugin Tips Before reading this guide, you'd better learn the VuePress first. Create a Plugin A plugin should be a plain JavaScript object that satisfies the , which i...","head":[["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://vuejs.press/zh/advanced/plugin.html"}],["meta",{"property":"og:url","content":"https://vuejs.press/advanced/plugin.html"}],["meta",{"property":"og:site_name","content":"VuePress"}],["meta",{"property":"og:title","content":"Writing a Plugin"}],["meta",{"property":"og:description","content":"Writing a Plugin Tips Before reading this guide, you'd better learn the VuePress first. Create a Plugin A plugin should be a plain JavaScript object that satisfies the , which i..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-02T14:23:03.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-02T14:23:03.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Writing a Plugin\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-02-02T14:23:03.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Create a Plugin","slug":"create-a-plugin","link":"#create-a-plugin","children":[]},{"level":2,"title":"Publish to NPM","slug":"publish-to-npm","link":"#publish-to-npm","children":[]}],"git":{"createdTime":1701614677000,"updatedTime":1706883783000,"contributors":[{"name":"Mr.Hope","email":"mister-hope@outlook.com","commits":2},{"name":"meteorlxy","email":"meteor.lxy@foxmail.com","commits":1}]},"readingTime":{"minutes":0.77,"words":231},"filePathRelative":"advanced/plugin.md","localizedDate":"December 3, 2023","autoDesc":true}`);export{A as comp,V as data};
